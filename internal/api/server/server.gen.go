// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	// Token JWT token for authenticated requests.
	Token *string `json:"Token,omitempty"`
}

// Blog defines model for Blog.
type Blog struct {
	// Author Name of the blog's author.
	Author *string `json:"Author,omitempty"`

	// Content Main content of the blog.
	Content *string `json:"Content,omitempty"`

	// CreatedAt Timestamp when the blog was created.
	CreatedAt *string `json:"CreatedAt,omitempty"`

	// ID Unique identifier of the blog.
	ID *string `json:"ID,omitempty"`

	// Title Title of the blog.
	Title *string `json:"Title,omitempty"`

	// UpdatedAt Timestamp when the blog was last updated.
	UpdatedAt *string `json:"UpdatedAt,omitempty"`
}

// BlogInput defines model for BlogInput.
type BlogInput struct {
	// Author Name of the blog's author.
	Author *string `json:"Author,omitempty"`

	// Content Main content of the blog.
	Content *string `json:"Content,omitempty"`

	// Title Title of the blog.
	Title *string `json:"Title,omitempty"`
}

// SignInInput defines model for SignInInput.
type SignInInput struct {
	Email *openapi_types.Email `json:"Email,omitempty"`

	// Password User's password.
	Password *string `json:"Password,omitempty"`
}

// SignUpInput defines model for SignUpInput.
type SignUpInput struct {
	// Email User's email address.
	Email *string `json:"Email,omitempty"`

	// Password User's password.
	Password *string `json:"Password,omitempty"`
}

// PostAuthSigninJSONRequestBody defines body for PostAuthSignin for application/json ContentType.
type PostAuthSigninJSONRequestBody = SignInInput

// PostAuthSignupJSONRequestBody defines body for PostAuthSignup for application/json ContentType.
type PostAuthSignupJSONRequestBody = SignUpInput

// PostBlogsJSONRequestBody defines body for PostBlogs for application/json ContentType.
type PostBlogsJSONRequestBody = BlogInput

// PutBlogsIdJSONRequestBody defines body for PutBlogsId for application/json ContentType.
type PutBlogsIdJSONRequestBody = BlogInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// User Sign-In
	// (POST /auth/signin)
	PostAuthSignin(w http.ResponseWriter, r *http.Request)
	// User Sign-Up
	// (POST /auth/signup)
	PostAuthSignup(w http.ResponseWriter, r *http.Request)
	// Get all blogs
	// (GET /blogs)
	GetBlogs(w http.ResponseWriter, r *http.Request)
	// Create a new blog
	// (POST /blogs)
	PostBlogs(w http.ResponseWriter, r *http.Request)
	// Delete a blog
	// (DELETE /blogs/{id})
	DeleteBlogsId(w http.ResponseWriter, r *http.Request, id string)
	// Get a blog by ID
	// (GET /blogs/{id})
	GetBlogsId(w http.ResponseWriter, r *http.Request, id string)
	// Update a blog
	// (PUT /blogs/{id})
	PutBlogsId(w http.ResponseWriter, r *http.Request, id string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// User Sign-In
// (POST /auth/signin)
func (_ Unimplemented) PostAuthSignin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// User Sign-Up
// (POST /auth/signup)
func (_ Unimplemented) PostAuthSignup(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all blogs
// (GET /blogs)
func (_ Unimplemented) GetBlogs(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new blog
// (POST /blogs)
func (_ Unimplemented) PostBlogs(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a blog
// (DELETE /blogs/{id})
func (_ Unimplemented) DeleteBlogsId(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a blog by ID
// (GET /blogs/{id})
func (_ Unimplemented) GetBlogsId(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a blog
// (PUT /blogs/{id})
func (_ Unimplemented) PutBlogsId(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAuthSignin operation middleware
func (siw *ServerInterfaceWrapper) PostAuthSignin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthSignin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostAuthSignup operation middleware
func (siw *ServerInterfaceWrapper) PostAuthSignup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthSignup(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetBlogs operation middleware
func (siw *ServerInterfaceWrapper) GetBlogs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBlogs(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostBlogs operation middleware
func (siw *ServerInterfaceWrapper) PostBlogs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostBlogs(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteBlogsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteBlogsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteBlogsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetBlogsId operation middleware
func (siw *ServerInterfaceWrapper) GetBlogsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBlogsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutBlogsId operation middleware
func (siw *ServerInterfaceWrapper) PutBlogsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutBlogsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/signin", wrapper.PostAuthSignin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/signup", wrapper.PostAuthSignup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/blogs", wrapper.GetBlogs)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/blogs", wrapper.PostBlogs)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/blogs/{id}", wrapper.DeleteBlogsId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/blogs/{id}", wrapper.GetBlogsId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/blogs/{id}", wrapper.PutBlogsId)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXTW8bNxD9KwRbIJettWly2ptdF8EWbWHEMnoocqCXI4kpl2Q4Q7uCof9ekFx9eako",
	"tuW2N5o0Z4bvvXmzeuCd7Z01YAh588CxW0Av0vI80OIjoLMGIf7tvHXgSUE6ndq/wMSFBOy8cqSs4Q3/",
	"5Y8po3jEZtYzEWgBhlQnCCTz8CUAEp7xitPSAW84kldmzlerzY69/Qwd8VXFL7Sdj/PGqqwfJ/5d9MDs",
	"jNEC2K228zeYsltfyFbxn6whMDQO85tQhnX5dDdcOYqH+LDzQpyp6gFJ9I7dL8BswrB7gazL14oh28tx",
	"rBujvgRgSkYoZwr80cKmijSUiiINRy/fOPmcV2mBxEK++wSGW+MC/b9pfgGapVdfq7lpzYF3/9wLpeNi",
	"Zn0viDcc0k6hrCuBeG+9LAgGwb9B5oZ/eEJdN+5YXcVMqUYmpPSAePb6xcYtZWZ2HO38qk3Ok3pMmXnF",
	"PJBXcJfWSZ5pJYxkEjTEvxJ5uezMdBImO3eOV/wOPObQb8/qszq+xTowwine8Hdpq+JO0CLBNIlinKCa",
	"G5XM0VksqO98xxaZYAHBp4I8UPCGieygsaBIgYi3WskbfmWR4t3rHL/ig6NeWLmMWbqt3IVzOsZX1kw+",
	"ozVbb4+r7z3MeMO/m2zNfzI4/2RXngnomER5kLwhHyBt5KGQXvxjXZ8s9d7ESbkP4qasYRi6DhBnQZ9F",
	"Wt7Xb78KdbwyE0pHe4qxMfS98MtBgiy++4fWpKMtjcEdpjHbPxPMwP1AYtfZYOjrzAX3isytG/ibmHtb",
	"7sb1gNoBWC8HiOvxldbcCa0kUzExk4LEYXxvXMY3dVwMNYcCsB9zy0ZotcJk0ELrbZvuY/sB6CKFe6Ey",
	"FUGPxzBOHyVbQxLei2VRqpvKh6r3EfkAtH1SjHfAKKQc5JXGLNk0a3CJBH1ZZFskTq+v7bj+dnWdLHEJ",
	"5GTTB8S6B/dep97maGsVTh6UXGXoNVBhzl+mfSYMg78VbgYGu10yRcjC46+zMTE5QqKmlWlceNEDgUfe",
	"/Dn6rFgAay93vysi77m4GDoOljRweMWN6KMKleSP6ah2oH08Tj+NqHo/fnXCNmctGsGhK8YSm9lgRia7",
	"hnHAvzra+k8EeW0Dz0H4tXCtX70FpmuNSCChND6XnWRIG8jby+RJoUBQ/nXwkm64CvSiVsi/MU5I2X/u",
	"lPW/45TDj7OTdPNaBms3jYfg78o8/mo7odl1OucVD17zhi+IXDOZ6Hi2sEjNu7qu+erT6p8AAAD//6zc",
	"DrGTEAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
